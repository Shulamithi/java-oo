{"name":"Java-OO","body":"# Java Operator Overloading #\r\n\r\nImplementation of ([Scala-like]) [Operator Overloading] for Java language.\r\nWorks with standard JavaC compiler, Netbeans IDE, Eclipse IDE and any build tools.\r\n\r\nExample (see other examples at [examples/](https://github.com/amelentev/java-oo/tree/master/examples) dir):\r\n\r\n```java\r\nimport java.math.*;\r\nimport java.util.*;\r\npublic class Test {\r\n\tpublic static void main(String[] args) {\r\n\t\tBigInteger  a = BigInteger.valueOf(1),\r\n\t\t\t\tb = BigInteger.valueOf(2),\r\n\r\n\t\t\t\tc1 = a.negate().add(b.multiply(b)).add(b.divide(a)), // without OO\r\n\t\t\t\tc2 = -a + b*b + b/a; // with OO\r\n\r\n\t\tif (c1.compareTo(c2)<0 || c1.compareTo(c2)>0) System.out.println(\"impossible\"); // without OO\r\n\t\tif (c1<c2 || c1>c2) System.out.println(\"impossible\"); // with OO\r\n\r\n\t\tHashMap<String, String> map = new HashMap<>();\r\n\t\tif (!map.containsKey(\"qwe\")) map.put(\"qwe\", \"asd\"); // without OO\r\n\t\tif (map[\"qwe\"]==null) map[\"qwe\"] = \"asd\"; // with OO\r\n\t}\r\n}\r\n```\r\n\r\n# Installation #\r\n\r\n## Eclipse IDE update site ##\r\nClick in menu: Help - Install New Software. Enter in \"Work with\" field:\r\n\r\n\thttp://amelentev.github.com/eclipse.jdt-oo-site/\r\n\r\nTested on 3.7.2, 4.2M7.\r\n\r\n## Netbeans IDE ##\r\nAdd [javac-oo-plugin.jar] as compile or processor library to Netbeans and enable \"Annotation Processing in Editor\" (Project Properties-Build-Compiling). Tested on 7.1.1, 7.2-dev\r\n\r\n## javac, ant, etc ##\r\nJust add [javac-oo-plugin.jar] to classpath:\r\n```\r\njavac -cp javac-oo-plugin.jar <sources>\r\n```\r\nDemo at [examples/compile.sh](https://github.com/amelentev/java-oo/blob/master/examples/compile.sh)\r\n\r\n## Maven ##\r\nLook at [javac-oo-mvndemo/pom.xml](https://github.com/amelentev/java-oo/blob/master/javac-oo-mvndemo/pom.xml)\r\n\r\n# Details #\r\n\r\nSupported operators (operator to method map):\r\n\r\nbinary:\r\n\r\n\t| OPERATOR | METHOD    |\r\n\t------------------------\r\n\t| +        | add       |\r\n\t| -        | subtract  |\r\n\t| *        | multiply  |\r\n\t| /        | divide    |\r\n\t| %        | remainder |\r\n\t| &        | and       |\r\n\t| |        | or        |\r\n\t| ^        | xor       |\r\n\t| <<       | shiftLeft |\r\n\t| >>       | shiftRight|\r\n\r\nunary:\r\n\r\n\t| - | negate |\r\n\t| ~ | not    |\r\n\r\ncomparison:\r\n\r\n\t| <, <=, >, >= | compareTo\t| example: `a < b` <=> `a.compareTo(b)<0`\r\n\t`==` and `!=` is not overloadable because it will break things\r\n\r\nindex:\r\n\r\n\t| []  | get       | `v = lst[i]` <=> `v = lst.get(i)`\r\n\t| []= | set, put  | `map[s] = v` <=> `map.put(s,v)`,  `lst[i] = v` <=> `lst.set(i,v)`\r\n\r\nThese methods exists in many java classes (ex:BigInteger,BigDecimal) so you can\r\nuse operators on them \"out of the box\". Or you can add these methods to your classes to use OO (see [examples/Vector.java](https://github.com/amelentev/java-oo/blob/master/examples/Vector.java)).\r\n\r\n\r\n[Scala-like]: http://www.slideshare.net/joeygibson/operator-overloading-in-scala-2923973\r\n[javac-oo]: https://bitbucket.org/amelentev/javac-oo\r\n[lombok]: http://projectlombok.org/\r\n[lombok-oo]: https://github.com/amelentev/lombok-oo\r\n[eclipse]: http://eclipse.org/\r\n[Java Developer Tools]: http://eclipse.org/jdt/\r\n[Intellij Idea]: http://www.jetbrains.com/idea/\r\n[eclipse-oo]: https://github.com/amelentev/eclipse.jdt-oo\r\n[Operator Overloading]: http://en.wikipedia.org/wiki/Operator_overloading\r\n\r\n[javac-oo-plugin.jar]: http://amelentev.github.com/mvnrepo/java-oo/javac-oo-plugin/0.1/javac-oo-plugin-0.1.jar\r\n","tagline":"Java Operator Overloading","google":"UA-31894853-1","note":"Don't delete this file! It's used internally to help with page regeneration."}