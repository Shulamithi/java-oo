{"name":"Java-OO","tagline":"Java Operator Overloading","body":"# Java Operator Overloading #\r\n\r\nJava-OO is a modular extension (plugin) to Java compilers and IDEs\r\nfor ([Scala-like]) [Operator Overloading] support.\r\nWorks with standard JavaC compiler, [Netbeans IDE], [Eclipse IDE], [IntelliJ IDEA] IDE and any build tools.\r\n\r\nExample (see other examples at [examples/](https://github.com/amelentev/java-oo/tree/master/examples) dir):\r\n\r\n```java\r\nimport java.math.*;\r\nimport java.util.*;\r\npublic class Test {\r\n  public static void main(String[] args) {\r\n    BigInteger a = BigInteger.valueOf(1), // without OO\r\n               b = 2, // with OO\r\n\r\n    c1 = a.negate().add(b.multiply(b)).add(b.divide(a)), // without OO\r\n    c2 = -a + b*b + b/a; // with OO\r\n\r\n    if (c1.compareTo(c2)<0 || c1.compareTo(c2)>0) // without OO\r\n      System.out.println(\"impossible\");\r\n    if (c1<c2 || c1>c2) // with OO\r\n      System.out.println(\"impossible\");\r\n\r\n    HashMap<String, String> map = new HashMap<>();\r\n    if (!map.containsKey(\"qwe\")) map.put(\"qwe\", map.get(\"asd\")); // without OO\r\n    if (map[\"qwe\"]==null) map[\"qwe\"] = map[\"asd\"]; // with OO\r\n  }\r\n}\r\n```\r\n# Versions #\r\n\r\n\tJavaC/Netbeans: 0.4\r\n\tJavaC8:         0.1.1\r\n\tEclipse:        0.4\r\n\tIntelliJ IDEA:  0.3.1\r\n\r\n# News #\r\n31 May 2014. Javac8 plugin version 0.1.1 released. Removed runtime depencendy on nbjavac.\r\n\r\n24 May 2014. [IntelliJ IDEA](#IDEA) plugin v0.3.1 released. Bugfixes for IDEA 13 Ultimate and for type resolution for binary expressions with primitives.\r\n\r\n30 April 2014. [IJPLA] published a [paper] about Java-OO.\r\n\r\n3 Feb 2014. New JavaC8 plugin version 0.1 for JDK8 was released.\r\nIt has the same features as JavaC plugin for JDK7 but doesn't work in Netbeans yet.\r\n\r\n12 Jan 2014. JavaC plugin version 0.4 and Eclipse plugin version 0.4 released.\r\nNow operator overloading perform autoboxing/autounboxing primitive to/from wrapper types where appropriate.\r\nFixed [javac plugin bug with index-set OO](https://github.com/amelentev/java-oo/issues/13).\r\n\r\n3 Jan 2014. JavaC plugin version 0.3 released.\r\nFixed [#10 javac: binary operator adds erroneous cast on 1st operand](https://github.com/amelentev/java-oo/issues/10).\r\n\r\n8 Sep 2013. Eclipse plugin version 0.3 released.\r\nRemoved copypasta from Eclipse Compiler. Plugin should be more steady agains compiler changes.\r\n\r\n14 May 2013. [IntelliJ IDEA](#IDEA) IDE plugin v0.2.1 with IDEA Ultimate Edition support.\r\n\r\n17 Apr 2013. [IntelliJ IDEA](#IDEA) IDE plugin v0.2.\r\n\r\n26 Nov 2012. [Version 0.2] released. New feature: [Assignment operator overloading](https://github.com/amelentev/java-oo/issues/4) via static _#valueOf_ method.\r\n[Version 0.2]: https://github.com/amelentev/java-oo/issues?milestone=1&state=closed\r\n\r\n# Installation #\r\n\r\n## javac, ant, etc ##\r\nJust add to classpath: [javac-oo-plugin.jar] for JDK7 or [javac8-oo-plugin.jar] for JDK8.\r\n```\r\njavac -cp javac-oo-plugin.jar <sources>\r\n```\r\nDemo at [examples/compile.sh](https://github.com/amelentev/java-oo/blob/master/examples/compile.sh)\r\n\r\n## [Eclipse IDE] update site ##\r\nClick in menu: `Help - Install New Software`. Enter in `Work with` field:\r\n\r\n\thttp://amelentev.github.io/eclipse.jdt-oo-site/\r\n\r\nTested on Eclipse Standard 4.3.1. Should work with older/newer versions too.\r\n\r\n## [Netbeans IDE] ##\r\n1. Add [javac-oo-plugin.jar] as compile or processor library to Netbeans.\r\n2. Enable \"Annotation Processing in Editor\": `Project Properties -> Build -> Compiling`.\r\n\r\nTested on 7.2.1\r\n\r\n<a name=\"IDEA\" />\r\n## [IntelliJ IDEA] IDE ##\r\n1. Install [Java Operator Overloading support](http://plugins.jetbrains.com/plugin?pr=&pluginId=7224) plugin: `File -> Settings -> Plugins -> Browse repositories`. Mirror: [idea-oo-plugin.jar]) <br/>\r\nFor [Maven projects](#maven) installation is done. IDEA should setup everything according to pom.xml. <br/>\r\nFor other project types: <br/>\r\n2. Add [javac-oo-plugin.jar] as compile or processor library.\r\n3. Enable Annotation Processing:\r\n`Menu File -> Settings -> Compiler -> Annotation Processing -> Enable annotation processing`\r\n4. Make sure you use `javac` compiler in `Settings -> Java Compiler -> Use compiler`. <br/>\r\nTested on IDEA 12.1.3 Community and Ultimate Editions.\r\n\r\n### Android project in IDEA 12 ###\r\nAdd [javac-oo-plugin.jar] to `File - Settings - Compiler - Annotation Processors - Processor path` \r\n\r\n### Android Studio (IDEA 13) / Gradle ###\r\nadd to `build.gradle`:\r\n\r\n```\r\nrepositories {\r\n\tmaven { url 'http://amelentev.github.io/mvnrepo/' }\r\n}\r\ndependencies {\r\n\tcompile 'java-oo:javac-oo-plugin:0.4'\r\n}\r\n```\r\n\r\n<a name=\"maven\" />\r\n## Maven ##\r\nLook at [javac-oo-mvndemo/pom.xml](https://github.com/amelentev/java-oo/blob/master/javac-oo-mvndemo/pom.xml)\r\n\r\n# Details #\r\n\r\nRead the [paper] to learn more.\r\nSupported operators (operator to method name map):\r\n\r\nbinary:\r\n\r\n\t| OPERATOR | METHOD NAME|\r\n\t-------------------------\r\n\t| +        | add        |\r\n\t| -        | subtract   |\r\n\t| *        | multiply   |\r\n\t| /        | divide     |\r\n\t| %        | remainder  |\r\n\t| &        | and        |\r\n\t| |        | or         |\r\n\t| ^        | xor        |\r\n\t| <<       | shiftLeft  |\r\n\t| >>       | shiftRight |\r\n\r\nunary:\r\n\r\n\t| -        | negate     |\r\n\t| ~        | not        |\r\n\r\ncomparison:\r\n\r\n\t| <, <=, >, >= | compareTo\t| example: `a < b` <=> `a.compareTo(b)<0`\r\n\t`==` and `!=` are not overloadable because it will break things\r\n\r\nindex:\r\n\r\n\t| []  | get       | `v = lst[i]` <=> `v = lst.get(i)`\r\n\t| []= | set, put  | `map[s] = v` <=> `map.put(s,v)`,  `lst[i] = v` <=> `lst.set(i,v)`\r\n\r\nassignment:\r\n\r\n\t| var = expr | var = VarClass.valueOf(expr) |\r\n\r\nif `expr` is not assignable to `var` and `var` is an instance of `VarClass` and `expr` has type `ExprType` and there are static method `VarClass#valueOf(ExprType)` <br/>\r\nthen `var = expr` is transformed to `var = VarClass.valueOf(expr)`.\r\nexample: <br/>\r\n`BigInteger a = 1` is transformed to `BigInteger a = BigInteger.valueOf(1)`\r\n\r\nThese methods exists in many java classes (example: BigInteger, BigDecimal) so you can\r\nuse operators on them \"out of the box\". Or you can add these methods to your classes to use OO (see [examples/Vector.java](https://github.com/amelentev/java-oo/blob/master/examples/Vector.java)).\r\n\r\n## Publications\r\n[\"Java Modular Extension for Operator Overloading\", IJPLA, April 2014.](https://github.com/amelentev/java-oo/raw/master/doc/ijpla.pdf)\r\n\r\n[Scala-like]: http://www.slideshare.net/joeygibson/operator-overloading-in-scala-2923973\r\n[javac-oo]: https://bitbucket.org/amelentev/javac-oo\r\n[lombok]: http://projectlombok.org/\r\n[lombok-oo]: https://github.com/amelentev/lombok-oo\r\n[Eclipse IDE]: http://eclipse.org/\r\n[Netbeans IDE]: http://www.netbeans.org/\r\n[IntelliJ IDEA]: http://www.jetbrains.com/idea/\r\n[Java Developer Tools]: http://eclipse.org/jdt/\r\n[eclipse-oo]: https://github.com/amelentev/eclipse.jdt-oo\r\n[Operator Overloading]: http://en.wikipedia.org/wiki/Operator_overloading\r\n[AJDT and Equanox Weaving]: http://wiki.eclipse.org/Equinox_Weaving_QuickStart\r\n[PDE]: http://www.eclipse.org/pde/\r\n[maven]: https://maven.apache.org/\r\n\r\n[javac-oo-plugin.jar]: http://amelentev.github.io/mvnrepo/java-oo/javac-oo-plugin/0.4/javac-oo-plugin-0.4.jar\r\n[javac8-oo-plugin.jar]: http://amelentev.github.io/mvnrepo/java-oo/javac8-oo-plugin/0.1.1/javac8-oo-plugin-0.1.1.jar\r\n[idea-oo-plugin.jar]: http://amelentev.github.io/mvnrepo/java-oo/idea-oo-plugin/idea-oo-plugin-0.3.1.jar\r\n[IJPLA]: http://airccse.org/journal/ijpla/current2014.html#apr\r\n[paper]: https://github.com/amelentev/java-oo/raw/master/doc/ijpla.pdf\r\n","google":"UA-31894853-1","note":"Don't delete this file! It's used internally to help with page regeneration."}