CompoundAssignment overload:
	a += b		<=>		a.mutableAdd(b)  or  a = a.add(b)

increment/decrement:
	a++  => a.postInc()
	--a  => a.preDec()
	a+=b => a.addAssign(b) or a = a.add(b) 

implict valueOf:
	BigInteger a = 1	<=>	BigInteger a = BigInteger.valueOf(1)

translate to pure java. like delombok
	via pe.getFiler(), after Attr phase

bug:
	lst[0] = lst[1] = 1;

extension methods
	str.iterator() -> static Iterator<Char> iterator(String s)
	import static StringUtils.iterator;
	@Extension public static Iterator<Character> iterator(String s);

Flow dependent typing
	Object a = ...; if (a instanceof BigInteger) c = a.add(b) // without ((BigInteger)a).add(b)

null operators:
	obj?.method()  -> obj==null ? null : obj.method()
	obj ?: "null"  -> obj==null ? "null" : obj
	String? s    <=>  @Nullable String s
	String  s    <=>  @NotNull String s

light syntax:
	like python.
